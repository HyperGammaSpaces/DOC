
## Does nothing
NOP, 0x0020, 4, -game:FE8 -indexMode:8

## Ends scene
END, 0x0120, 4, -game:FE8 -indexMode:8 -end

## Ends all scenes
TERMINATE, 0x0121, 4, -game:FE8 -indexMode:8 -end

## Clears given evbit
EVBIT_F, 0x0220, 4, -game:FE8 -indexMode:8
	Evbit, 2, 2, -preferredBase:10

## Sets given evbit
EVBIT_T, 0x0228, 4, -game:FE8 -indexMode:8
	Evbit, 2, 2, -preferredBase:10

## Clears given flag
FLAG_F, 0x0221, 4, -game:FE8 -indexMode:8
	Flag, 2, 2, -preferredBase:10

## Clears given flag
FLAG_T, 0x0229, 4, -game:FE8 -indexMode:8
	Flag, 2, 2, -preferredBase:10

## Clears given flag
FLAG_F_S2, 0x0221, 4, -game:FE8 -indexMode:8
	0xFFFF, 2, 2, -fixed

## Clears given flag
FLAG_T_S2, 0x0229, 4, -game:FE8 -indexMode:8
	0xFFFF, 2, 2, -fixed

## Gets evbit state in sC
GET_EVBIT, 0x0320, 4, -game:FE8 -indexMode:8
	Evbit, 2, 2, -preferredBase:10

## Gets flag state in sC
GET_FLAG, 0x0321, 4, -game:FE8 -indexMode:8
	Flag, 2, 2, -preferredBase:10

## Gets random number between 0 and Max in sC
GET_RAND, 0x0420, 4, -game:FE8 -indexMode:8
	Max, 2, 2, -preferredBase:10

## Sets given value to given slot
SVAL, 0x0540, 8, -game:FE8 -indexMode:8
	Slot,  2, 2
	Value, 4, 4

## Sets pointer to given offset as value of given slot
SPOIN, 0x0540, 8, -game:FE8 -indexMode:8 -noDisassembly
	Slot,   2, 2
	Offset, 4, 4, -pointer:unknown

## Sets given coordinates as value of given slot
SCOORD, 0x0540, 8, -game:FE8 -indexMode:8 -noDisassembly
	Slot,   2, 2
	Coords, 4, 4, -coordinates:2 -preferredBase:10

## Add slot values
SADD, 0x0620, 32, -game:FE8
	SlotDest, 16, 4
	SlotSrc1, 20, 4
	SlotSrc2, 24, 4

## Substract slot values
SSUB, 0x0621, 32, -game:FE8
	SlotDest, 16, 4
	SlotSrc1, 20, 4
	SlotSrc2, 24, 4

## Multiply slot values
SMUL, 0x0622, 32, -game:FE8
	SlotDest, 16, 4
	SlotSrc1, 20, 4
	SlotSrc2, 24, 4

## Divide slot values
SDIV, 0x0623, 32, -game:FE8
	SlotDest, 16, 4
	SlotSrc1, 20, 4
	SlotSrc2, 24, 4

## Modulus (?) slot values
SMOD, 0x0624, 32, -game:FE8
	SlotDest, 16, 4
	SlotSrc1, 20, 4
	SlotSrc2, 24, 4

## Bitwise And slot values
SAND, 0x0625, 32, -game:FE8
	SlotDest, 16, 4
	SlotSrc1, 20, 4
	SlotSrc2, 24, 4

## Bitwise Or slot values
SORR, 0x0626, 32, -game:FE8
	SlotDest, 16, 4
	SlotSrc1, 20, 4
	SlotSrc2, 24, 4

## Bitwise Exclusive Or slot values
SXOR, 0x0627, 32, -game:FE8
	SlotDest, 16, 4
	SlotSrc1, 20, 4
	SlotSrc2, 24, 4

## Bitwise Left shift slot values
SLSL, 0x0628, 32, -game:FE8
	SlotDest, 16, 4
	SlotSrc1, 20, 4
	SlotSrc2, 24, 4

## Bitwise Right shift slot values
SLSR, 0x0629, 32, -game:FE8
	SlotDest, 16, 4
	SlotSrc1, 20, 4
	SlotSrc2, 24, 4

## Enqueues given slot value
SENQUEUE, 0x0720, 4, -game:FE8 -indexMode:8
	SlotIndex, 2, 2

## Enqueues slot 1 value
SENQUEUE, 0x0721, 4, -game:FE8 -indexMode:8

## Dequeues value into given slot
SDEQUEUE, 0x0722, 4, -game:FE8 -indexMode:8
	SlotIndex, 2, 2

## Sets goto location
LABEL, 0x0820, 4, -game:FE8 -indexMode:8
	LabelId, 2, 2, -preferredBase:10

## Goto LabelId
GOTO, 0x0920, 4, -game:FE8 -indexMode:8
	LabelId, 2, 2, -preferredBase:10

## Call given scene
CALL, 0x0A40, 8, -game:FE8 -indexMode:8
	Scene, 4, 4, -pointer

CALL_S2, 0x0A40, 8, -game:FE8 -indexMode:8
	0xFFFFFFFF, 4, 4, -fixed

QUEUECALL, 0x0B40, 8, -game:FE8 -indexMode:8
	Mode,  2, 2, -preferredBase:10
	Scene, 4, 4, -pointer

QUEUECALL_S2, 0x0B40, 8, -game:FE8 -indexMode:8
	Mode,       2, 2, -preferredBase:10
	0xFFFFFFFF, 4, 4, -fixed

QUEUETUTORIAL, 0x0B41, 8, -game:FE8 -indexMode:8
	Mode,  2, 2, -preferredBase:10
	Scene, 4, 4, -pointer

QUEUETUTORIAL_S2, 0x0B41, 8, -game:FE8 -indexMode:8
	Mode,       2, 2, -preferredBase:10
	0xFFFFFFFF, 4, 4, -fixed

## Goto LabelId if Slot1 == Slot2
BEQ, 0x0C40, 8, -game:FE8 -indexMode:8
	LabelId, 2, 2, -preferredBase:10
	Slot1, 4, 2
	Slot2, 6, 2

## Goto LabelId if Slot1 != Slot2
BNE, 0x0C41, 8, -game:FE8 -indexMode:8
	LabelId, 2, 2, -preferredBase:10
	Slot1, 4, 2
	Slot2, 6, 2

## Goto LabelId if Slot1 >= Slot2
BGE, 0x0C42, 8, -game:FE8 -indexMode:8
	LabelId, 2, 2, -preferredBase:10
	Slot1, 4, 2
	Slot2, 6, 2

## Goto LabelId if Slot1 > Slot2
BGT, 0x0C43, 8, -game:FE8 -indexMode:8
	LabelId, 2, 2, -preferredBase:10
	Slot1, 4, 2
	Slot2, 6, 2

## Goto LabelId if Slot1 <= Slot2
BLE, 0x0C44, 8, -game:FE8 -indexMode:8
	LabelId, 2, 2, -preferredBase:10
	Slot1, 4, 2
	Slot2, 6, 2

## Goto LabelId if Slot1 < Slot2
BLT, 0x0C45, 8, -game:FE8 -indexMode:8
	LabelId, 2, 2, -preferredBase:10
	Slot1, 4, 2
	Slot2, 6, 2

## Calls native function
FUNC, 0x0D40, 8, -game:FE8 -indexMode:8
	Function, 4, 4, -pointer:ASM

## Stall for x frames
STALL, 0x0E20, 4, -game:FE8 -indexMode:8
	Amount, 2, 2, -preferredBase:10

## Stall for x frames (skippable with B)
STALL_SKIP, 0x0E21, 4, -game:FE8 -indexMode:8
	Amount, 2, 2, -preferredBase:10

## Stall for x frames (sped up if A is held or fast game speed)
STALL_FAST, 0x0E22, 4, -game:FE8 -indexMode:8
	Amount, 2, 2, -preferredBase:10

## Stall for x frames (combines behavior of STALL_SKIP and STALL_FAST)
STALL_SKIP_FAST, 0x0E23, 4, -game:FE8 -indexMode:8
	Amount, 2, 2, -preferredBase:10

## Get value of given counter into slot C
GET_COUNTER, 0x0F20, 4, -game:FE8 -indexMode:8
	Id, 2, 1, -preferredBase:10

## Sets value of given counter (range: 0-15)
SET_COUNTER, 0x0F21, 4, -game:FE8 -indexMode:8
	Id, 2, 1, -preferredBase:10
	Value, 3, 1, -preferredBase:10

## Increments value of given counter (max 15, won't overflow)
INC_COUNTER, 0x0F22, 4, -language:FE8 -indexMode:8
	Id, 2, 1, -preferredBase:10

## Decrements value of given counter (min 0, won't underflow)
DEC_COUNTER, 0x0F23, 4, -language:FE8 -indexMode:8
	Id, 2, 1, -preferredBase:10

## This Configures what the player is allowed to skip or not
##  - param 0: everything is allowed
##  - param 1: nothing is allowed
##  - param 2: no text fast-forwarding
##  - param 3: no scene-skipping
##  - param 4: no scene-skipping, no text-skipping (text fast-forwarding still allowed)
CONFIG_SKIP, 0x1020, 4, -game:FE8 -indexMode:8
	Config, 2, 2, -preferredBase:10

## Sets Key ignore mask 
IGNORE_KEYS, 0x1120, 4, -game:FE8 -indexMode:8
	KeyMask, 2, 2, -preferredBase:2

MUSIC, 0x1220, 4, -game:FE8 -indexMode:8
	SongId, 2, 2

# Hacky shit ik
MUSIC, 0, 32, -game:FE8
	0x132, 4,  12, -fixed
	SongId, 16, 16
	Speed,  0,  4, -preferredBase:10

MUSIC_REPLACE, 0x1420, 4, -game:FE8 -indexMode:8
	SongId, 2, 2

MUSIC_RESTORE, 0x1421, 4, -game:FE8 -indexMode:8
	Delay, 2, 2, -preferredBase:10

MUSIC_QUIET_T, 0x1520, 4, -game:FE8 -indexMode:8

MUSIC_QUIET_F, 0x1521, 4, -game:FE8 -indexMode:8

SOUND, 0x1620, 4, -game:FE8 -indexMode:8
	SongId, 2, 2

FADEOUT, 0x1720, 4, -game:FE8 -indexMode:8
	Speed, 2, 2, -preferredBase:10

FADEIN, 0x1721, 4, -game:FE8 -indexMode:8
	Speed, 2, 2, -preferredBase:10

FADEOUT_WHITE, 0x1722, 4, -game:FE8 -indexMode:8
	Speed, 2, 2, -preferredBase:10

FADEIN_WHITE, 0x1723, 4, -game:FE8 -indexMode:8
	Speed, 2, 2, -preferredBase:10

COLORFADE_INIT, 0x1860, 12, -game:FE8 -indexMode:8

COLORFADE_TERM, 0x1861, 12, -game:FE8 -indexMode:8

COLORFADE_FADE, 0x1862, 12, -game:FE8 -indexMode:8
	Target, 2,  2, -preferredBase:10 -coordinates:2
	Speed,  4,  2, -preferredBase:10
	Red,    6,  2, -preferredBase:10
	Green,  8,  2, -preferredBase:10
	Blue,   10, 2, -preferredBase:10

## Checks for your mode; returns 0x1 for Prologue-C8, 0x2 for Eirika Mode, and 0x3 for Ephraim Mode.
GET_MODE, 0x1920, 4, -game:FE8 -indexMode:8

## Get's the Chapter Number associated with the map/location you're on.
GET_CHAPTERID, 0x1921, 4, -game:FE8 -indexMode:8

## Boolean check for Difficult Mode.
GET_ISHARD, 0x1922, 4, -game:FE8 -indexMode:8

## Stores current turn number to slot 0xC.
GET_TURNNUMBER, 0x1923, 4, -game:FE8 -indexMode:8

## Counts up number of enemies on the map
GET_COUNT_RED, 0x1924, 4, -game:FE8 -indexMode:8

## Counts up number of NPCs on the map
GET_COUNT_GREEN, 0x1925, 4, -game:FE8 -indexMode:8

## Gets 1 if you are in a skirmish or dungeon. Used for the Retreat command.
GET_ISSKIRMISH, 0x1926, 4, -game:FE8 -indexMode:8

## Gets 1 if tutorials are enabled (i.e. Easy Mode)
GET_ISTUTORIAL, 0x1927, 4, -game:FE8 -indexMode:8

## Gets your current amount of gold.
GET_MONEY, 0x1928, 4, -game:FE8 -indexMode:8

## Loads the Event ID associated with the current event to slot 0xC.
GET_ACTIVE_FLAG, 0x1929, 4, -game:FE8 -indexMode:8

## Checks your Mode byte; likely checks to see if you are in the postgame.
GET_ISPOSTGAME, 0x192A, 4, -game:FE8 -indexMode:8

# mooom! stan is doing hacky shit again!
TEXTMODE, 0, 32, -game:FE8
	TextMode, 0, 4, -preferredBase:10
	0x1A2, 4, 12, -fixed

TEXT, 0x1B20, 4, -game:FE8 -indexMode:8
	MsgId, 2, 2

TEXT_S2, 0x1B20, 4, -game:FE8 -indexMode:8
	0xFFFF, 2, 2, -fixed

MORETEXT, 0x1B21, 4, -game:FE8 -indexMode:8
	MsgId, 2, 2

TEXTCLEAR, 0x1B22, 4, -game:FE8 -indexMode:8

RESUMETEXT, 0x1C20, 4, -game:FE8 -indexMode:8

TEXTWAIT, 0x1D20, 4, -game:FE8 -indexMode:8

FACE, 0, 32, -game:FE8
	0x1E2,    4,  12, -fixed
	FaceSlot, 0,  4, -preferredBase:10
	FaceId,   16, 16

FACE_MOVE, 0x1F20, 4, -game:FE8 -indexMode:8
	FromFaceSlot, 2, 1, -preferredBase:10
	ToFaceSlot,   3, 1, -preferredBase:10

TEXTCLOSE, 0x2020, 4, -game:FE8 -indexMode:8

BACKGROUND, 0x2140, 8, -game:FE8 -indexMode:8
	BackgroundId, 2, 2

BACKGROUND_S2, 0x2140, 8, -game:FE8 -indexMode:8
	0xFFFF, 2, 2, -fixed

BACKGROUND_CHANGE, 0x2141, 8, -game:FE8 -indexMode:8
	BackgroundId,   2, 2
	TargetTextType, 4, 2, -preferredBase:10
	Speed,          6, 2, -preferredBase:10

BACKGROUND_TOCOLOR, 0x2142, 8, -game:FE8 -indexMode:8
	BackgroundId, 2, 2
	SourceColor,  4, 2
	Speed,        6, 2, -preferredBase:10

BACKGROUND_FROMCOLOR, 0x2143, 8, -game:FE8 -indexMode:8
	SourceColor,  4, 2
	Speed,        6, 2, -preferredBase:10

CLEAN, 0x2220, 4, -game:FE8 -indexMode:8

HIDEMAP, 0x2320, 4, -game:FE8 -indexMode:8

SHOWMAP, 0x2420, 4, -game:FE8 -indexMode:8

MAP, 0x2520, 4, -game:FE8 -indexMode:8
	ChapterId, 2, 2, -preferredBase:10

## Moves camera such that given position is visible
CAMERA, 0x2620, 4, -game:FE8 -indexMode:8
	Position, 2, 2, -coordinates:2 -preferredBase:10

## Moves camera such that given position is visible
CAMERA_SB, 0x2620, 4, -game:FE8 -indexMode:8
	0xFFFF, 2, 2, -fixed

## Moves camera such that given CharId is visible
CAMERA, 0x2621, 4, -game:FE8 -indexMode:8
	CharId, 2, 2

## Centers camera on given position
CAMERA_CENTERED, 0x2628, 4, -game:FE8 -indexMode:8
	Position, 2, 2, -coordinates:2 -preferredBase:10

## Centers camera on given position
CAMERA_CENTERED, 0x2628, 4, -game:FE8 -indexMode:8
	0xFFFF, 2, 2, -fixed

## Centers camera on given CharId
CAMERA_CENTERED, 0x2629, 4, -game:FE8 -indexMode:8
	CharId, 2, 2

MAPCHANGE, 0x2720, 4, -game:FE8 -indexMode:8
	MapChangeId, 2, 2, -preferredBase:10

MAPREVERT, 0x2721, 4, -game:FE8 -indexMode:8
	MapChangeId, 2, 2, -preferredBase:10

WEATHER, 0x2820, 4, -game:FE8 -indexMode:8
	WeatherId, 2, 2, -preferredBase:10

FOGVISION, 0x2920, 4, -game:FE8 -indexMode:8
	Vision, 2, 2, -preferredBase:10

## Return to title screen
GOTO_TITLE, 0x2A20, 4, -game:FE8 -indexMode:8

## Go to world map and call given chapter's WM intro scene
GOTO_CHAPTER, 0x2A21, 4, -game:FE8 -indexMode:8
	ChapterId, 2, 2

## Go to given chapter.
## WARNING: may require preparation in order to not consider the chapter as skirmish.
GOTO_CHAPTER_NOWM, 0x2A22, 4, -game:FE8 -indexMode:8
	ChapterId, 2, 2

## Go to given chapter without prompting for a save.
## WARNING: may require preparation in order to not consider the chapter as skirmish.
GOTO_CHAPTER_NOSAVE, 0x2A23, 4, -game:FE8 -indexMode:8
	ChapterId, 2, 2

## Go to save screen, and then plays epilogue events corresponding to current mode
GOTO_EPILOGUE, 0x2A24, 4, -game:FE8 -indexMode:8

## Sets amount of units to load for next load
LOADCONFIG_COUNT, 0x2B20, 4, -game:FE8 -indexMode:8
	UnitCount, 2, 2

## Sets proportion of units marked as being loaded at random position to actually be loaded at random position for next load.
LOADCONFIG_RANDOM_POS_PROPORTION, 0x2B21, 4, -game:FE8 -indexMode:8
	Chance, 2, 2

## Disable defined movements ("REDAs") for next load.
LOADCONFIG_DISABLE_DEFINED_MOVEMENT, 0x2B22, 4, -game:FE8 -indexMode:8

## Load a group of units
LOAD, 0x2C40, 8, -game:FE8 -indexMode:8 
	Param, 2, 2
	Units, 4, 4, -pointer:unit

## Load a group of units (address in s2)
LOAD_S2, 0x2C40, 8, -game:FE8 -indexMode:8 
	Param, 2, 2
	0xFFFFFFFF, 4, 4, -fixed

## Load a group of units. Loaded units will dissapear when the event engine ends.
LOAD_CUTSCENE, 0x2C41, 8, -game:FE8 -indexMode:8
	0x0001, 2, 2, -fixed
	Units, 4, 4, -pointer:unit

## Load a group of units (address in s2). Loaded units will dissapear when the event engine ends.
LOAD_CUTSCENE_S2, 0x2C41, 8, -game:FE8 -indexMode:8
	0xFFFFFFFF, 4, 4, -fixed

## Load a group of units. Loaded units get replaced with the player's currently deployed unit list.
LOAD_DEPLOYED, 0x2C42, 8, -game:FE8 -indexMode:8
	Param, 2, 2
	Units, 4, 4, -pointer:unit

## Load a group of units (address in s2). Loaded units get replaced with the player's currently deployed unit list.
LOAD_DEPLOYED_S2, 0x2C42, 8, -game:FE8 -indexMode:8
	Param, 2, 2
	0xFFFFFFFF, 4, 4, -fixed

## Load active skirmish enemy group.
LOAD_SKIRMISH, 0x2C43, 8, -game:FE8 -indexMode:8
	Param, 2, 2

UNIT_COLORS, 0x2D20, 32, -game:FE8
	NewBlue,  16, 4, -preferredBase:10
	NewRed,   20, 4, -preferredBase:10
	NewGreen, 24, 4, -preferredBase:10

GET_AT, 0x2E20, 4, -game:FE8 -indexMode:8
	Position, 2, 2, -coordinates:2 -preferredBase:10

GET_ACTIVE, 0x2E21, 4, -game:FE8 -indexMode:8

MOVE, 0x2F40, 8, -game:FE8 -indexMode:8
	Speed, 2, 2, -preferredBase:10
	CharId, 4, 2
	Position, 6, 2, -coordinate:2 -preferredBase:10

MOVE_ONTO, 0x2F41, 8, -game:FE8 -indexMode:8
	Speed, 2, 2, -preferredBase:10
	CharId, 4, 2
	TargetCharId, 6, 2

#Move one step
MOVE_1STEP, 0x2F42, 8, -game:FE8 -indexMode:8
	Speed, 2, 2, -preferredBase:10
	CharId, 4, 2
	Direction, 6, 2, -preferredBase:10

MOVE_DEFINED, 0x2F43, 8, -game:FE8 -indexMode:8
	CharId, 4, 2

MOVE_CLOSEST, 0x2F48, 8, -game:FE8 -indexMode:8
	Speed, 2, 2, -preferredBase:10
	CharId, 4, 2
	Position, 6, 2, -coordinate:2 -preferredBase:10

MOVE_NEXTTO, 0x2F49, 8, -game:FE8 -indexMode:8
	Speed, 2, 2, -preferredBase:10
	CharId, 4, 2
	TargetCharId, 6, 2

MOVE_1STEP_CLOSEST, 0x2F4A, 8, -game:FE8 -indexMode:8
	Speed, 2, 2, -preferredBase:10
	CharId, 4, 2
	Direction, 6, 2, -preferredBase:10

MOVE_DEFINED_CLOSEST, 0x2F4B, 8, -game:FE8 -indexMode:8
	CharId, 4, 2

MOVEWAIT, 0x3020, 4, -game:FE8 -indexMode:8

## Shows movement & attack range for unit
SHOW_MOVERANGE, 0x3120, 4, -game:FE8 -indexMode:8
	Char, 2, 2

## Hides currently displayed movement & attack range
HIDE_MOVERANGE, 0x3121, 4, -game:FE8 -indexMode:8

## Loads one Ally unit with it's default parameters (will set the "drop last item" flag)
SPAWN_BLUE, 0x3240, 8, -game:FE8 -indexMode:8
	Char, 2, 2
	Position, 4, 2, -coordinates:2 -preferredBase:10

## Loads one NPC unit with it's default parameters (will set the "drop last item" flag)
SPAWN_GREEN, 0x3241, 8, -game:FE8 -indexMode:8
	Char, 2, 2
	Position, 4, 2, -coordinates:2 -preferredBase:10

## Loads one Enemy unit with it's default parameters (will set the "drop last item" flag)
SPAWN_RED, 0x3242, 8, -game:FE8 -indexMode:8
	Char, 2, 2
	Position, 4, 2, -coordinates:2 -preferredBase:10

## This unit will dissapear at the end of events
SPAWN_CUTSCENE_BLUE, 0x324F, 8, -game:FE8 -indexMode:8
	Char, 2, 2
	Position, 4, 2, -coordinates:2 -preferredBase:10

## Loads one Ally unit with it's default parameters (will set the "drop last item" flag)
SPAWN_BLUE_SB, 0x3240, 8, -game:FE8 -indexMode:8
	Char, 2, 2
	0xFFFF, 4, 2, -fixed

## Loads one NPC unit with it's default parameters (will set the "drop last item" flag)
SPAWN_GREEN_SB, 0x3241, 8, -game:FE8 -indexMode:8
	Char, 2, 2
	0xFFFF, 4, 2, -fixed

## Loads one Enemy unit with it's default parameters (will set the "drop last item" flag)
SPAWN_RED_SB, 0x3242, 8, -game:FE8 -indexMode:8
	Char, 2, 2
	0xFFFF, 4, 2, -fixed

## This unit will dissapear at the end of events
SPAWN_CUTSCENE_BLUE_SB, 0x324F, 8, -game:FE8 -indexMode:8
	Char, 2, 2
	0xFFFF, 4, 2, -fixed

GET_EXISTS, 0x3320, 4, -game:FE8 -indexMode:8
	CharId, 2, 2

GET_BUGGED, 0x3321, 4, -game:FE8 -indexMode:8
	CharId, 2, 2

GET_ISALIVE, 0x3322, 4, -game:FE8 -indexMode:8
	CharId, 2, 2

GET_ISDEPLOYED, 0x3323, 4, -game:FE8 -indexMode:8
	CharId, 2, 2

GET_ISACTIVE, 0x3324, 4, -game:FE8 -indexMode:8
	CharId, 2, 2

GET_FACTION, 0x3325, 4, -game:FE8 -indexMode:8
	CharId, 2, 2

GET_POSITION, 0x3326, 4, -game:FE8 -indexMode:8
	CharId, 2, 2

GET_CLASS, 0x3327, 4, -game:FE8 -indexMode:8
	CharId, 2, 2

GET_LUCK, 0x3328, 4, -game:FE8 -indexMode:8
	CharId, 2, 2

HIDEUNIT, 0x3420, 4, -game:FE8 -indexMode:8
	CharId, 2, 2

SHOWUNIT, 0x3421, 4, -game:FE8 -indexMode:8
	CharId, 2, 2

FACTION_BLUE, 0x3422, 4, -game:FE8 -indexMode:8
	CharId, 2, 2

FACTION_GREEN, 0x3423, 4, -game:FE8 -indexMode:8
	CharId, 2, 2

FACTION_RED, 0x3424, 4, -game:FE8 -indexMode:8
	CharId, 2, 2

SET_HP, 0x3425, 4, -game:FE8 -indexMode:8
	CharId, 2, 2

SET_HASMOVED, 0x3426, 4, -game:FE8 -indexMode:8
	CharId, 2, 2

SET_HASMOVED_AI, 0x3427, 4, -game:FE8 -indexMode:8
	CharId, 2, 2

SET_DEPLOYED, 0x3428, 4, -game:FE8 -indexMode:8
	CharId, 2, 2

REMOVEALL_BLUE, 0x342A, 4, -game:FE8 -indexMode:8

REMOVEALL_GREEN, 0x342B, 4, -game:FE8 -indexMode:8

REMOVEALL_RED, 0x342C, 4, -game:FE8 -indexMode:8

KILL, 0x342D, 4, -game:FE8 -indexMode:8
	CharId, 2, 2

AWAIT_KILL, 0x342E, 4, -game:FE8 -indexMode:8
	CharId, 2, 2

REMOVEUNIT, 0x342F, 4, -game:FE8 -indexMode:8
	CharId, 2, 2

## Changes Unit Class (weapon ranks, stats, etc stay the same)
RECLASS, 0x3540, 8, -game:FE8 -indexMode:8
	Char,  2, 2
	Class, 4, 2

## Changes Unit Class (class becomes default class for given char id)
RECLASS_FROMCHAR, 0x3540, 8, -game:FE8 -indexMode:8
	Char, 2, 2
	0x00, 4, 2, -fixed
	From, 6, 2

## Units switch classes... somewhat (the first unit will gain the *default* class of the second unit, while the second unit *will* get the class the first unit was in beforehand)
SWITCH_CLASSES, 0x3541, 8, -game:FE8 -indexMode:8
	Char1, 2, 2
	Char2, 4, 2

## Checks if given unit is in Area defined by Rect (X, Y, X+W, Y+H) and stores 0 (false) or 1 (true) to slot 0xC accordingly
GET_ISINAREA, 0x3640, 8, -game:FE8 -indexMode:8
	CharId,     2, 2
	TopLeftPos, 4, 2, -coordinates:2 -preferredBase:10
	Size,       6, 2, -coordinates:2 -preferredBase:10

ITEM, 0x3720, 4, -game:FE8 -indexMode:8
	CharId, 2, 2

MONEY, 0x3721, 4, -game:FE8 -indexMode:8
	CharId, 2, 2

TAKEMONEY, 0x3722, 4, -game:FE8 -indexMode:8

SET_ACTIVE, 0x3820, 4, -game:FE8 -indexMode:8
	CharId, 2, 2

SET_AI, 0x3920, 4, -game:FE8 -indexMode:8
	CharId, 2, 2

SET_AI, 0x3921, 4, -game:FE8 -indexMode:8
	Position, 2, 2, -coordinates:2 -preferredBase:10

SET_AI_SB, 0x3921, 4, -game:FE8 -indexMode:8
	0xFFFF, 2, 2, -fixed

POPUP, 0x3A40, 8, -game:FE8 -indexMode:8
	MsgId, 2, 2
	SongId, 4, 2

BROWNBOX, 0x3A41, 8, -game:FE8 -indexMode:8 -noDisassembly
	MsgId, 2, 2
	Position, 6, 2, -coordinates:2 -preferredBase:10

BROWNBOX_BUGGED, 0x3A41, 8, -game:FE8 -indexMode:8
	MsgId, 2, 2
	Position, 4, 4, -coordinates:2 -preferredBase:10

## Display cursor on given position
CURSOR, 0x3B20, 4, -game:FE8 -indexMode:8
	Position, 2, 2, -coordinate:2 -preferredBase:10

CUSOR_SB, 0x3B20, 4, -game:FE8 -indexMode:8
	0xFFFF, 2, 2, -fixed

## Display cursor on unit corresponding to given character
CURSOR, 0x3B21, 4, -game:FE8 -indexMode:8
	CharId, 2, 2

## Removes every displayed cursors
REMOVE_CURSORS, 0x3B22, 4, -game:FE8 -indexMode:8

## Display flashing cursor on given position
CURSOR_FLASHING, 0x3B24, 4, -game:FE8 -indexMode:8
	Position, 2, 2, -coordinate:2 -preferredBase:10

## Display flashing cursor on given position
CURSOR_FLASHING_SB, 0x3B24, 4, -game:FE8 -indexMode:8
	0xFFFF, 2, 2, -fixed

## Display flashing cursor on unit corresponding to given character
CURSOR_FLASHING, 0x3B25, 4, -game:FE8 -indexMode:8
	CharId, 2, 2

GET_CURSOR, 0x3C20, 4, -game:FE8 -indexMode:8

SET_CURSOR, 0x3C21, 4, -game:FE8 -indexMode:8
	Position, 2, 2, -coordinate:2 -preferredBase:10

SET_CURSOR_SB, 0x3C21, 4, -game:FE8 -indexMode:8
	0xFFFF, 2, 2, -fixed

DISABLEOPTIONS, 0x3D20, 4, -game:FE8 -indexMode:8
	OptionBits, 2, 2, -preferredBase:2

DISABLEWEAPONS, 0x3D21, 4, -game:FE8 -indexMode:8
	WeaponBits, 2, 2, -preferredBase:2

PREPSCREEN, 0x3E20, 4, -game:FE8 -indexMode:8

FIGHT, 0x3F40, 8, -game:FE8 -indexMode:8
	AttackCharId, 2, 2
	DefendCharId, 4, 2
	WeaponId,     6, 1
	IsBallista,   7, 1

FIGHT_MAP, 0x3F41, 8, -game:FE8 -indexMode:8
	AttackCharId, 2, 2
	DefendCharId, 4, 2
	WeaponId,     6, 1
	IsBallista,   7, 1

FIGHT_SCRIPT, 0x3F42, 8, -game:FE8 -indexMode:8

PROMOTE, 0x4040, 8, -game:FE8 -indexMode:8
	Character, 2, 2
	Class, 4, 2
	Item, 6, 2

WARPOUT, 0x4120, 4, -game:FE8 -indexMode:8
	Position, 2, 2, -coordinate:2 -preferredBase:10

WARPIN, 0x4121, 4, -game:FE8 -indexMode:8
	Position, 2, 2, -coordinate:2 -preferredBase:10

AWAIT_WARP, 0x412F, 4, -game:FE8 -indexMode:8

EARTHQUAKE, 0x4220, 4, -game:FE8 -indexMode:8
	ShakeDirection, 2, 1, -preferredBase:10
	PlaySoundBool,  3, 1, -preferredBase:10

EARTHQUAKE_END, 0x422F, 4, -game:FE8 -indexMode:8

## Displays summoning animation on the given character
SUMMON, 0x4320, 4, -game:FE8 -indexMode:8
	CharId, 2, 2

## Displays sacred stone breaking animation on the given character
BREAKSTONE, 0x4420, 4, -game:FE8 -indexMode:8
	CharId, 2, 2

#Makes a glowing X underneath the character.
GLOWINGCROSS, 0x4520, 4, -game:FE8 -indexMode:8
	CharId, 2, 2

GLOWINGCROSS_END, 0x452F, 4, -game:FE8 -indexMode:8
